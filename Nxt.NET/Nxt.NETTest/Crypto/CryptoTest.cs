using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Nxt.NETTest.Crypto
{
    [TestClass]
    public class CryptoTest
    {
        [TestMethod]
        public void VerifyGenerationSignatureOfSecondBlock()
        {
            var signature = new byte[]
            {
                33, 149, 249, 56, 229, 201, 76, 180, 164, 33, 151, 209, 207, 182, 166, 70, 89, 73, 188, 22, 120, 216, 210,
                148, 209, 147, 93, 242, 237, 109, 248, 13, 138, 131, 223, 21, 182, 162, 34, 169, 5, 252, 242, 134, 54,
                92, 212, 233, 186, 236, 169, 92, 61, 74, 214, 75, 155, 67, 14, 74, 7, 111, 151, 181
            };

            var message = new byte[]
            {
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            };

            var publicKey = new byte[]
            {
                1, 87, 114, 174, 173, 96, 2, 232, 202, 101, 102, 61, 240, 61, 144, 218, 238, 14, 60, 77, 60, 236, 198, 55,
                174, 52, 251, 39, 63, 194, 251, 85
            };

            var crypto = new NET.Crypto.Crypto();

            Assert.IsTrue(crypto.Verify(signature, message, publicKey, false));
        }

        [TestMethod]
        public void VerifyBlockSignatureOfSecondBlock()
        {
            var signature = new byte[]
            {
                245, 24, 230, 186, 219, 112, 222, 206, 204, 201, 243, 218, 28, 241, 73, 198, 2, 206, 74, 44, 33, 205, 236,
                225, 82, 192, 102, 162, 5, 207, 99, 11, 161, 119, 180, 45, 161, 190, 111, 189, 117, 127, 247, 40, 238,
                193, 28, 127, 55, 49, 198, 29, 38, 18, 223, 41, 20, 172, 224, 106, 209, 162, 66, 47
            };

            var data = new byte[]
            {
                1, 0, 0, 0, 25, 3, 0, 0, 185, 10, 114, 2, 70, 52, 50, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65, 228, 100, 155,
                147, 76, 164, 149, 153, 27, 120, 82, 184, 85, 1, 87, 114, 174, 173, 96, 2, 232, 202, 101, 102, 61, 240,
                61, 144, 218, 238, 14, 60, 77, 60, 236, 198, 55, 174, 52, 251, 39, 63, 194, 251, 85, 33, 149, 249, 56,
                229, 201, 76, 180, 164, 33, 151, 209, 207, 182, 166, 70, 89, 73, 188, 22, 120, 216, 210, 148, 209, 147,
                93, 242, 237, 109, 248, 13, 138, 131, 223, 21, 182, 162, 34, 169, 5, 252, 242, 134, 54, 92, 212, 233,
                186, 236, 169, 92, 61, 74, 214, 75, 155, 67, 14, 74, 7, 111, 151, 181
            };

            var publicKey = new byte[]
            {
                1, 87, 114, 174, 173, 96, 2, 232, 202, 101, 102, 61, 240, 61, 144, 218, 238, 14, 60, 77, 60, 236, 198, 55,
                174, 52, 251, 39, 63, 194, 251, 85
            };

            var crypto = new NET.Crypto.Crypto();
            Assert.IsTrue(crypto.Verify(signature, data, publicKey, false));
        }
    }
}
